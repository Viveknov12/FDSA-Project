//FAMILY NODE CODE
class FamilyNode
{
public:
    string name;
    string occupation;
    int age;
    int income;
    vector<FamilyNode *> children;

    FamilyNode(string n, string occ, int a, int inc)
        : name(n), occupation(occ), age(a), income(inc) {}
};


//BUILD TREE CODE
FamilyNode *buildTree()
{
    string name, occupation;
    int age, income;

    cout << "Enter name of member: ";
    cin >> name;

    cout << "Enter occupation of " << name << ": ";
    cin >> occupation;

    cout << "Enter age of " << name << ": ";
    cin >> age;

    cout << "Enter income of " << name << ": ";
    cin >> income;

    int numOfChildren;
    cout << "Enter number of children for " << name << ": ";
    cin >> numOfChildren;

    FamilyNode *node = new FamilyNode(name, occupation, age, income);

    for (int i = 0; i < numOfChildren; i++)
    {
        node->children.push_back(buildTree()); // Recursively build the tree for children
    }

    return node;
}

//PRINT UNIQUE OCCUPATION MEMBER
void printUniqueOccupationMember(FamilyNode *node, map<string, int> &occupationToCount)
{
    if (node == nullptr)
        return;

    occupationToCount[node->occupation]++;

    for (FamilyNode *child : node->children)
    {
        printUniqueOccupationMember(child, occupationToCount);
    }
}

void printUniqueOccupationMember(vector<FamilyNode *> &familyTrees)
{
    for (FamilyNode *root : familyTrees)
    {
        map<string, int> occupationToCount;
        printUniqueOccupationMember(root, occupationToCount);

        for (const auto &entry : occupationToCount)
        {
            if (entry.second == 1)
            {
                cout << "Member with a unique occupation: " << entry.first << endl;
            }
        }
    }
}


//RICHEST IN THE FAMILY

FamilyNode *findRichestInFamily(FamilyNode *root)
{
  FamilyNode *richest = root;
  for (FamilyNode *child : root->children)
  {
    FamilyNode *richestChild = findRichestInFamily(child);
    if (richestChild->income > richest->income)
    {
      richest = richestChild;
    }
  }
  return richest;
}


//RICHEST INDIVIDUAL IN EACH GENERATION
void printRichestIndividualEachGeneration(vector<FamilyNode *> &familyTrees)
{
  for (int i = 0; i < familyTrees.size(); i++)
  {
    FamilyNode *richest = findRichestInFamily(familyTrees[i]);
    cout << "Richest individual in the family of " << familyTrees[i]->name << " is " << richest->name << " with an income of " << richest->income << endl;
  }
}

//CALCULATING DIVERSITY SCORE

int calculateDiversityScore(FamilyNode *root)
{
  set<string> uniqueOccupations;
  for (FamilyNode *child : root->children)
  {
    uniqueOccupations.insert(child->occupation);
  }
  return uniqueOccupations.size();
}


//FINDING DIVERSE FAMILY

FamilyNode *getDiverseFamily(vector<FamilyNode *> &familyTrees)
{
  FamilyNode *result = nullptr;
  int maxDiversityScore = -1;

  for (int i = 0; i < familyTrees.size(); i++)
  {
    int diversityScore = calculateDiversityScore(familyTrees[i]);
    if (diversityScore > maxDiversityScore)
    {
      maxDiversityScore = diversityScore;
      result = familyTrees[i];
    }
  }

  return result;
}


//INT MAIN BEGINS
int main()
{
  int numOfFamilies;
  cout << "Enter the number of families: ";
  cin >> numOfFamilies;

  vector<FamilyNode *> familyTrees;

  for (int i = 0; i < numOfFamilies; i++)
  {
    familyTrees.push_back(buildTree());
  }

  while (true)
  {
    int choice;
    cout << "1. Find Member with Unique Occupation" << endl;
    cout << "2. Find Average income per Age group" << endl;
    cout << "3. Find Richest Individual of Each Generation" << endl;
    cout << "4. Print Family(Ancestor) Name which is most diverse" << endl;
    cout << "5. Exit" << endl;
    cout << "Enter your choice: ";
    cin >> choice;

    switch (choice)
    {
    case 1:
      printUniqueOccupationMember(familyTrees);
      break;
    case 2:
      printAverageIncomePerAgeGroup(familyTrees);
      break;
    case 3:
      printRichestIndividualEachGeneration(familyTrees);
      break;
    case 4:
    {
      FamilyNode *result = getDiverseFamily(familyTrees);
      cout << "Family of ancestor named " << result->name << " is most diverse" << endl;
      break;
    }
    case 5:
      return 0;
    default:
      cout << "Incorrect choice!!!" << endl;
    }
  }

  return 0;
}



